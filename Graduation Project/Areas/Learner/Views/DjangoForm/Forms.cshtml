<div style="max-width:75%; text-align:center; margin-left:auto; margin-right:auto;" class="d-flex flex-column justify-content-center align-content-center text-start">
    <h1 class="p-4 my-5 custom-title" style="font-size: 80px; font-weight: 700;">Forms</h1>
    <h4 class="text-center mt-4 mb-5">
        We use admin to customize admin layout, display data and accessability. 
        Use forms with user input. enables you to validate inputs. each app has its own forms.
    </h4>
    <br>
    <hr>
    <h2 class="my-5 custom-title">Creat app</h2>
    <h5 class="mt-4 mb-5">In your app create forms.py. Build your form logic.</h5>
    <br />
    <hr />
    <br />
    <h2 class="my-5 custom-title">Login Example</h2>
    <div class="rounded p-4 my-4 custom-div">
        <p class="mb-1">from django import forms</p>
        <p class="mb-1">class LoginForm(forms.Form):</p>
        <p class="mb-1 mr-25">username = forms.CharField(label='Your username', max_length=150)</p>
        <p class="mb-1 mr-25">password = forms.CharField(label='Your password', widget=forms.PasswordInput(attrs={'class': 'pt-2'}))</p>
    </div>
    <h5 class="mt-4 mb-5">In previous Example: username is text field that has label and max length. password is text field but we changed its widget to PasswordInput. to hide password content into stars (********). has its own class.</h5>
    <br />
    <hr />
    <br />
    <h2 class="my-5 custom-title">Contact Example</h2>
    <div class="rounded p-4 my-4 custom-div">
        <p class="mb-1">from django import forms</p>
        <p class="mb-1">class ContactForm(forms.Form):</p>
        <p class="mb-1 mr-25">subject = forms.CharField(max_length=100)</p>
        <p class="mb-1 mr-25">message = forms.CharField(widget=forms.Textarea)</p>
        <p class="mb-1 mr-25">sender = forms.EmailField()</p>
        <p class="mb-1 mr-25">attachment = forms.FileField(required=False)</p>
    </div>
    <br />
    <hr />
    <br />
    <h2 class="my-5 custom-title">Register Example included validation</h2>
    <div class="rounded p-4 my-4 custom-div">
        <p class="mb-1">from django import forms</p>
        <p class="mb-1">class RegisterForm(forms.Form):</p>
        <p class="mb-1 mr-25">username = forms.CharField(label='Your username', max_length=150)</p>
        <p class="mb-1 mr-25">email = forms.EmailField()</p>
        <p class="mb-1 mr-25">password = forms.CharField(label='Your password', widget=forms.PasswordInput)</p>
        <p class="mb-1 mr-25">confirm_password = forms.CharField(label='Confirm Your password', widget=forms.PasswordInput)</p>
        <p class="mb-1 mr-25">def clean_email(self):</p>
        <p class="mb-1 mr-50">email = self.cleaned_data['email']</p>
        <p class="mb-1 mr-50">if User.objects.filter(email=email).exists():</p>
        <p class="mb-1 mr-75">raise forms.ValidationError("This email is already associated with a user.")</p>
        <p class="mb-1 mr-50">return email</p>
        <p class="mb-1 mr-25">def clean(self):</p>
        <p class="mb-1 mr-25">cleaned_data = super().clean()</p>
        <p class="mb-1 mr-25">password = cleaned_data.get('password')</p>
        <p class="mb-1 mr-25">confirm_password = cleaned_data.get('confirm_password')</p>
        <p class="mb-1 mr-25">if password and confirm_password and password != confirm_password:</p>
        <p class="mb-1 mr-50">raise forms.ValidationError("Passwords do not match.")</p>
        <p class="mb-1 mr-25">return cleaned_data</p>
    </div>
    <br />
    <hr />
    <br />
    <h2 class="mt-5 mb-4 custom-title">Explanation</h2>
    <h5 class="mt-4 mb-5">
        cleaned_data: enable you to get the input value.
        forms.ValidationError: display error.
        clean_email function: we checked if the email is already bined with another user.
        clean function: we checked if password match the confirm_password.
    </h5>
</div>