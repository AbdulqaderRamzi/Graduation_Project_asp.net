<div style="max-width:75%; text-align:center; margin-left:auto; margin-right:auto;" class="d-flex flex-column justify-content-center align-content-center text-start">
    <h1 class="p-4 my-5 custom-title" style="font-size: 80px; font-weight: 700;">Forms</h1>
    <h4 class="text-center mt-4 mb-5">
        Use forms with user input. enables you to validate inputs. each app has its own forms.
    </h4>

    <br>
    <hr>
    <h2 class="my-5 custom-title">Creat app</h2>
    <h5 class="mt-4 mb-5">In your app create forms.py. Build your form logic.</h5>

    <br />
    <hr />
    <br />
    <h2 class="my-5 custom-title">Login Example</h2>
    <div class="mt-4"></div>
    <pre class="mb-4">
        <code class="language-Django">
            from django import forms
            class LoginForm(forms.Form):
                username = forms.CharField(label='Your username', max_length=150)
                password = forms.CharField(label='Your password', widget=forms.PasswordInput(attrs={'class': 'pt-2'}))
            <span></span>
        </code>
    </pre>
    <h5 class="mt-4 mb-5">In previous Example: username is text field that has label and max length. password is text field but we changed its widget to PasswordInput. to hide password content into stars (********). has its own class.</h5>

    <br />
    <hr />
    <br />
    <h2 class="my-5 custom-title">Contact Example</h2>
    <div class="mt-4"></div>
    <pre class="mb-4">
        <code class="language-Django">
            from django import forms
            class ContactForm(forms.Form):
                subject = forms.CharField(max_length=100)
                message = forms.CharField(widget=forms.Textarea)
                sender = forms.EmailField()
                attachment = forms.FileField(required=False)
            <span></span>
        </code>
    </pre>

    <br />
    <hr />
    <br />
    <h2 class="my-5 custom-title">Register Example included validation</h2>
    <div class="mt-4"></div>
    <pre class="mb-4">
        <code class="language-Django">
            from django import forms
            class RegisterForm(forms.Form):
                username = forms.CharField(label='Your username', max_length=150)
                email = forms.EmailField()
                password = forms.CharField(label='Your password', widget=forms.PasswordInput)
                confirm_password = forms.CharField(label='Confirm Your password', widget=forms.PasswordInput)

                def clean_email(self):
                    email = self.cleaned_data['email']
                    if User.objects.filter(email=email).exists():
                        raise forms.ValidationError("This email is already associated with a user.")
                    return email

                def clean(self):
                cleaned_data = super().clean()
                password = cleaned_data.get('password')
                confirm_password = cleaned_data.get('confirm_password')
                if password and confirm_password and password != confirm_password:
                    raise forms.ValidationError("Passwords do not match.")
                return cleaned_data
            <span></span>
        </code>
    </pre>

    <br />
    <hr />
    <br />
    <br />
    <h2 class="mt-5 mb-4 custom-title">Explanation</h2>
    <h5 class="mt-4 mb-4">cleaned_data: Enables you to get the input value.</h5>
    <h5 class="mt-0 mb-4">forms.ValidationError: Display error.</h5>
    <h5 class="mt-0 mb-4">clean_email function: Checked if the email is already bined with another user.</h5>
    <h5 class="mt-0 mb-5">clean function: Checked if password is match the confirm_password.</h5>
</div>