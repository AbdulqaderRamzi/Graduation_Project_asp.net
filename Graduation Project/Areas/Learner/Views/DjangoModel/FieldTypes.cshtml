<div style="max-width:75%; text-align:center; margin-left:auto; margin-right:auto;" class="d-flex flex-column justify-content-center align-content-center text-start">
    <h1 class="p-4 my-5 custom-title" style="font-size: 80px; font-weight: 700;">Field Types</h1>

    <hr />
    <h2 class="my-5 custom-title">Boolean</h2>
    <div class="mt-3"></div>
    <pre>
        <code class="language-Django">
            above_20 = models.BooleanField()
            <span></span>
        </code>
    </pre>
    <h4 class="mb-5 mt-4">Accept one of two types that are True and False.</h4>

    <hr />
    <h2 class="my-5 custom-title">Date</h2>
    <div class="mt-3"></div>
    <pre>
        <code class="language-Django">
            event_date = models.DateField()
            <span></span>
        </code>
    </pre>
    <h4 class="mb-3 mt-5">Store date: year-month-day without time.</h4>
    <div class="rounded p-4 mb-5 custom-div">
        <p class="mb-1">// Example</p>
        <p class="mb-1">Stored: event_date = "2023-08-24"</p>
        <p class="mb-1">Display: August 24, 2023</p>
    </div>

    <hr />
    <h2 class="my-5 custom-title">DateTime</h2>
    <div class="mt-3"></div>
    <pre>
        <code class="language-Django">
            appointment_datetime = models.DateTimeField()
            <span></span>
        </code>
    </pre>
    <h4 class="mb-3 mt-5">Store date and time: year-month-day-hours-minutes-seconds.</h4>
    <div class="rounded p-4 mb-5 custom-div">
        <p class="mb-1">// Example</p>
        <p class="mb-1">Stored: appointment_datetime = "2023-08-24 15:30:00"</p>
        <p class="mb-1">Display: August 24, 2023, 3:30 PM</p>
    </div>

    <hr />
    <h2 class="my-5 custom-title">Time</h2>
    <div class="mt-3"></div>
    <pre>
        <code class="language-Django">
            scheduled_time = models.TimeField()
            <span></span>
        </code>
    </pre>
    <h4 class="mb-3 mt-5">Store time: hours-minutes-seconds without date.</h4>
    <div class="rounded p-4 mb-5 custom-div">
        <p class="mb-1">// Example</p>
        <p class="mb-1">Stored: scheduled_time = "15:30:00"</p>
        <p class="mb-1">Display: 3:30 PM</p>
    </div>

    <hr />
    <h2 class="my-5 custom-title">Char</h2>
    <div class="mt-3"></div>
    <pre>
        <code class="language-Django">
            name = models.CharField(max_length=200)
            <span></span>
        </code>
    </pre>
    <h4 class="mb-5 mt-4">Used for short to medium length with predefined maximum length. name will be short for that we used Char.</h4>

    <hr />
    <h2 class="my-5 custom-title">Text</h2>
    <div class="mt-3"></div>
    <pre>
        <code class="language-Django">
            description = models.TextField()
            <span></span>
        </code>
    </pre>
    <h4 class="mb-5 mt-4">Used for long text without predefined the maximum length. the description will be long for that we used Text.</h4>

    <hr />
    <h2 class="my-5 custom-title">Email</h2>
    <div class="mt-3"></div>
    <pre>
        <code class="language-Django">
            email = models.EmailField()
            <span></span>
        </code>
    </pre>
    <h4 class="mb-5 mt-4">Used when you want the field to just accept the email input.</h4>

    <hr />
    <h2 class="my-5 custom-title">URL</h2>
    <div class="mt-3"></div>
    <pre>
        <code class="language-Django">
            class Website(models.Model):
                url = models.URLField()
            <span></span>
        </code>
    </pre>
    <h4 class="mb-5 mt-4">Used to store url link. for example: https://www.example.com/</h4>

    <hr />
    <h2 class="my-5 custom-title">Decimal</h2>
    <div class="mt-3"></div>
    <pre>
        <code class="language-Django">
            total_amount = models.DecimalField(max_digits=7, decimal_places=2)
            <span></span>
        </code>
    </pre>
    <h4 class="mb-4 mt-5">Predefined max digits and decimal places.</h4>
    <div class="rounded p-4 custom-div">
        <p class="mb-1">// Example about decimal_places</p>
        <p class="mb-1">decimal_places=2 could be 00.00</p>
        <p class="mb-1">decimal_places=3 could be 00.000</p>
    </div>
    <div class="rounded p-4 mt-2 mb-5 custom-div">
        <p class="mb-1">// Example about max_digits</p>
        <p class="mb-1">max_digits=7 max value could be 1234567.00</p>
        <p class="mb-1">max_digits=4 max value could be 1234.00</p>
    </div>

    <hr />
    <h2 class="my-5 custom-title">Float</h2>
    <div class="mt-3"></div>
    <pre>
        <code class="language-Django">
            price = models.FloatField()
            <span></span>
        </code>
    </pre>
    <h4 class="mb-3 mt-5">Doesn't have predefined max digits and decimal places, but you can give it a max_digits if you want.</h4>
    <div class="rounded p-4 custom-div">
        <p class="mb-1">// Example</p>
        <p class="mb-1">1452.32324</p>
    </div>
    <h6 class="mb-5 mt-5 custom-color">The difference between the float and decimal is Float doesn't have decimal places.</h6>

    <hr />
    <h2 class="my-5 custom-title">Integer</h2>
    <div class="mt-3"></div>
    <pre>
        <code class="language-Django">
            points = models.IntegerField()
            <span></span>
        </code>
    </pre>
    <h4 class="mb-5 mt-4">Store Positive and Negative Integer value that refers to integers greater than or less than or equal to zero.</h4>

    <hr />
    <h2 class="my-5 custom-title">PositiveInteger</h2>
    <div class="mt-3"></div>
    <pre>
        <code class="language-Django">
            age = models.PositiveIntegerField()
            <span></span>
        </code>
    </pre>
    <h4 class="mb-5 mt-4">Store Positive Integer value that refers to integers greater than or equal to zero.</h4>

    <hr />
    <h2 class="my-5 custom-title">File</h2>
    <div class="mt-3"></div>
    <pre>
        <code class="language-Django">
            document = models.FileField(upload_to='documents/')
            image = models.FileField(upload_to='images/')
            video = models.FileField(upload_to='videos/')
            <span></span>
        </code>
    </pre>
    <h4 class="mb-0 mt-5">You can use it to store image, video, document, excel, and pdf etc.</h4>
    <h4 class="mb-5 mt-2">upload_to is required. it used to define folder name that will be used to store the files.</h4>

    <hr />
    <h2 class="my-5 custom-title">Image</h2>
    <h4 class="mb-0 mt-4">Same as the FileField but it just used to store image not the all file types.</h4>
    <h4 class="mb-5 mt-2">upload_to is required. it used to define folder name that will be used to store the images.</h4>

    <hr />
    <h2 class="my-5 custom-title">JSON</h2>
    <div class="mt-3"></div>
    <pre>
        <code class="language-Django">
            user_data = JSONField()
            <span></span>
        </code>
    </pre>
    <div class="mt-2"></div>
    <pre>
        <code class="language-Django">
            // Example
            {"age": 30, "email": "user@example.com", "location": "City"}
            <span></span>
        </code>
    </pre>
    <h4 class="mb-5 mt-4">Store dictionary of data.</h4>

    <hr />
    <h2 class="my-5 custom-title">Slug</h2>
    <div class="mt-3"></div>
    <pre class="mb-3">
        <code class="language-Django">
            product_code = models.SlugField()
            <span></span>
        </code>
    </pre>
    <h4 class="mb-0 mt-5">Doesn't accept spaces in the field.</h4>
    <h4 class="mb-5 mt-3">You can't store p 123, you can store it as p-123 or p_123 so, you can use underscores or hyphens.</h4>
</div>