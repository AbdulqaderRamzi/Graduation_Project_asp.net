<div style="max-width:75%; text-align:center; margin-left:auto; margin-right:auto;" class="d-flex flex-column justify-content-center align-content-center text-start">
    <h1 class="p-4 my-5 custom-title" style="font-size: 80px; font-weight: 700;">Signal</h1>
    <h4 class="mt-4 text-center mb-5">Signals provide way to allow decoupled applications to get notified when certain actions occur elsewhere in the application.</h4>
    <hr />
    <h4 class="mt-5 mb-5 custom-color text-center">Signal has pre and post save.</h4>
    <h5 class="mt-3 mb-0"><span style="font-size: 22px;font-weight: 700;" class="custom-color text-lg-start">1 </span>pre: signal will implement before saving the object</h5>
    <h5 class="mt-3 mb-5"><span style="font-size: 22px;font-weight: 700;" class="custom-color text-lg-start">2 </span>post: signal will implement after saving the object</h5>

    <hr />
    <h2 class="my-5 custom-title">Example</h2>
    <h6 class="mt-4 custom-color">In the following example, don't forget to configure your email in settings.</h6>
    <div class="mt-4"></div>
    <pre>
        <code class="language-Django">
            from django.db import models
            from django.contrib.auth.models import User
            from django.db.models.signals import post_save
            from django.dispatch import receiver
            from django.core.mail import send_mail
            @@receiver(post_save, sender=User)
            def send_welcome_email(sender, instance, created, **kwargs):
                if created:
                    subject = 'Welcome to our website!'
                    message = 'Thank you for registering on our website.'
                    from_email = 'admin@example.com'
                    recipient_list = [instance.email]
                    send_mail(subject, message, from_email, recipient_list)
            <span></span>
        </code>
    </pre>
    <h5 class="mt-4 mb-5">
        Signal will send email to the users after they registered.
        It is not suitable to make it pre_signal because it doesn't make sense to send email to users before they register.
    </h5>

    <hr />
    <h2 class="my-5 custom-title">Example</h2>
    <div class="mt-3"></div>
    <pre>
        <code class="language-Django">
            from django.db import models
            from django.contrib.auth.models import User
            from django.db.models.signals import post_save
            from django.dispatch import receiver
            class UserActivityLog(models.Model):
                user = models.ForeignKey(User, on_delete=models.CASCADE)
                activity = models.CharField(max_length=100)
                timestamp = models.DateTimeField(auto_now_add=True)
            def log_user_activity(sender, instance, **kwargs):
                activity = f"User {instance.user.username} performed {instance.activity}."
                UserActivityLog.objects.create(user=instance.user, activity=activity)
            post_save.connect(log_user_activity, sender=UserActivityLog)
            <span></span>
        </code>
    </pre>
    <h5 class="my-4">
        Signal will be implemented after creating the instance of UserActivityLog.
        It's possible to use pre_save to modify the log entry just before it's saved.
    </h5>
    <pre class="mb-5">
        <code class="language-Django">
            @@receiver(pre_save, sender=UserActivityLog)
            def update_activity_message(sender, instance, **kwargs):
                instance.activity = f"User {instance.user.username} is about to perform {instance.activity}."
            <span></span>
        </code>
    </pre>

    <hr />
    <h2 class="my-5 custom-title">Example</h2>
    <div class="mt-3"></div>
    <pre>
        <code class="language-Django">
            from django.db import models
            from django.contrib.auth.models import User
            from django.db.models.signals import post_save
            from django.dispatch import receiver
            class UserProfile(models.Model):
                user = models.OneToOneField(User, on_delete=models.CASCADE)
            @@receiver(post_save, sender=User)
            def create_user_profile(sender, instance, created, **kwargs):
                if created:
                    UserProfile.objects.create(user=instance)
            @@receiver(post_save, sender=User)
            def save_user_profile(sender, instance, **kwargs):
                instance.userprofile.save()
            <span></span>
        </code>
    </pre>
    <h5 class="mt-4 mb-5">
        Automatically create a user profile when a new user register.
        pre_save is not suitable because it's generally used to modify the fields of the current instance being saved.
        To create a related profile automatically, post_save is more appropriate.
    </h5>

    <hr />
    <h2 class="my-5 custom-title">Example</h2>
    <div class="mt-3"></div>
    <pre>
        <code class="language-Django">
            class Client(models.Model):
                full_name = models.CharField(max_length=200, verbose_name="Full Name")
                slug_name = models.SlugField(max_length=222, verbose_name="Slug Name", blank=True, null=True)
                def __str__(self):
                    return self.slug_name
            @@receiver(pre_save, sender=Client)
            def handle_slug(sender, **kwargs):
                instance = kwargs['instance']
                instance.slug_name = slugify(instance.slug_name)
            <span></span>
        </code>
    </pre>
    <h4 class="mt-4 mb-5">
        Slugify the name before saving the instance.
    </h4>
</div>