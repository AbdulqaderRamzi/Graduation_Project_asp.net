<div style="max-width:75%; text-align:center; margin-left:auto; margin-right:auto;" class="d-flex flex-column justify-content-center align-content-center text-start">
    <h1 class="p-4 my-5 custom-title" style="font-size: 80px; font-weight: 700;">Relationships</h1>

    <hr />
    <h2 class="my-5 custom-title">OnToOne</h2>
    <div class="mt-4"></div>
    <pre>
        <code class="language-Django">
            OneToOneField(Model Name, on_delete logic)
            <span></span>
        </code>
    </pre>
    <h5 class="mt-3 mb-2">Each instance of the model on one side of the relationship is associated with, at most, one instance on the other side.</h5>
    <h4 class="mt-5 mb-3">Examples:</h4>
    <pre>
        <code class="language-Django">
            from django.contrib.auth.models import User
            from django.db import models
            class Profile(models.Model):
                user = models.OneToOneField(User, on_delete=models.CASCADE)
                bio = models.TextField()
                avatar = models.ImageField(upload_to='avatars/')
            <span></span>
        </code>
    </pre>
    <h5 class="mt-3 mb-3">Each User can be related to one Profile otherwise, each Profile can be related to at most one User.</h5>
    <pre>
        <code class="language-Django">
            class Passport(models.Model):
                passport_number = models.CharField(max_length=20)
                expiration_date = models.DateField()

            class Visa(models.Model):
                passport = models.OneToOneField(Passport, on_delete=models.CASCADE)
                country = models.CharField(max_length=50)
                entry_date = models.DateField()
                expiration_date = models.DateField()
            <span></span>
        </code>
    </pre>
    <h5 class="mt-3 mb-3">Each Passport can be related to one Visa otherwise, each Visa can be related to at most one Passport.</h5>
    <pre>
        <code class="language-Django">
            class Student(models.Model):
                first_name = models.CharField(max_length=50)
                last_name = models.CharField(max_length=50)
                date_of_birth = models.DateField()

            class StudentRecord(models.Model):
                student = models.OneToOneField(Student, on_delete=models.CASCADE)
                grade_point_average = models.DecimalField(max_digits=4, decimal_places=2)
                attendance_percentage = models.DecimalField(max_digits=5, decimal_places=2)
            <span></span>
        </code>
    </pre>
    <h5 class="mt-3 mb-5">Each Student can be related to one StudentRecord otherwise, each StudentRecord can be related to at most one Student.</h5>

    <hr />
    <h2 class="my-5 custom-title">ManyToOne</h2>
    <div class="mt-3"></div>
    <pre>
        <code class="language-Django">
            ForeignKey(Model Name, on_delete logic)
            <span></span>
        </code>
    </pre>
    <div class="mt-2"></div>
    <pre>
        <code class="language-Django">
            class Blog(models.Model):
                name = models.CharField(max_length=100)
                description = models.TextField()

            class Post(models.Model):
                blog = models.ForeignKey(Blog, on_delete=models.CASCADE)
                title = models.CharField(max_length=200)
                content = models.TextField()
            <span></span>
        </code>
    </pre>
    <h5 class="mt-3 mb-3">Each Blog can be related to many Posts otherwise, each Post can be related to at most one Blog.</h5>
    <pre>
        <code class="language-Django">
            class Category(models.Model):
                name = models.CharField(max_length=100)
                description = models.TextField()

            class Product(models.Model):
                category = models.ForeignKey(Category, on_delete=models.CASCADE)
                name = models.CharField(max_length=200)
                price = models.DecimalField(max_digits=10, decimal_places=2)
            <span></span>
        </code>
    </pre>
    <h5 class="mt-3 mb-3">Each Category can be related to many Products otherwise, each Product can be related to at most one Category.</h5>
    <pre>
        <code class="language-Django">
            class University(models.Model):
                name = models.CharField(max_length=100)
                location = models.CharField(max_length=100)

            class Student(models.Model):
                university = models.ForeignKey(University, on_delete=models.CASCADE)
                name = models.CharField(max_length=100)
                major = models.CharField(max_length=100)
            <span></span>
        </code>
    </pre>
    <h5 class="mt-3 mb-5">Each University can be related to many Students otherwise, each Student can be related to at most one University.</h5>

    <hr />
    <h2 class="my-5 custom-title">ManyToMany</h2>
    <div class="mt-3"></div>
    <pre>
        <code class="language-Django">
            ManyToManyField(Model Name)
            <span></span>
        </code>
    </pre>
    <div class="mt-2"></div>
    <pre>
        <code class="language-Django">
            class Playlist(models.Model):
                name = models.CharField(max_length=100)
                songs = models.ManyToManyField(Song)

            class Song(models.Model):
                title = models.CharField(max_length=200)
                artist = models.CharField(max_length=100)
                duration = models.DurationField()
            <span></span>
        </code>
    </pre>
    <h5 class="mt-3 mb-3">Each Playlist can be related to many Songs otherwise, each Song can be related to many Playlists.</h5>
    <pre>
        <code class="language-Django">
            class Author(models.Model):
                name = models.CharField(max_length=100)
                biography = models.TextField()

            class Book(models.Model):
                title = models.CharField(max_length=200)
                authors = models.ManyToManyField(Author)
                publication_date = models.DateField()
            <span></span>
        </code>
    </pre>
    <h5 class="mt-3 mb-3">Each Author can be related to many Books otherwise, each Book can be related to many Authors.</h5>
    <pre>
        <code class="language-Django">
            class Actor(models.Model):
                name = models.CharField(max_length=100)
                birthdate = models.DateField()

            class Movie(models.Model):
                title = models.CharField(max_length=100)
                actors = models.ManyToManyField(Actor)
            <span></span>
        </code>
    </pre>
    <h5 class="mt-3 mb-5">Each Actor can be related to many Movies otherwise, each Movie can be related to many Actors.</h5>
</div>