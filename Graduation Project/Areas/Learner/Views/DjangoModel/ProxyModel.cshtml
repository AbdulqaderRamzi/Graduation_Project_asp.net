<div style="max-width:75%; text-align:center; margin-left:auto; margin-right:auto;" class="d-flex flex-column justify-content-center align-content-center text-start">
    <h1 class="p-4 my-5 custom-title" style="font-size: 80px; font-weight: 700;">Proxy models</h1>
    <hr />
    <h5 class="mb-0 mt-5">Proxy model will not create new database table. Proxy models and their original models share the same database table.</h5>
    <h5 class="mb-0 mt-3">You can use it when you want to change the behavior of the model.</h5>
    <h5 class="mb-0 mt-3">Proxy model is used to add a new method or change the default manager.</h5>
    <h5 class="mb-5 mt-3">You can use Proxy model to create objects of model that inherited in proxy model.</h5>

    <hr />
    <h2 class="my-5 custom-title">Examples</h2>
    <pre class="mb-5">
        <code class="language-Django">
            class Book(models.Model):
                title = models.CharField(max_length=100)
                price = models.DecimalField(max_digits=5, decimal_places=2)
            <span></span>
        </code>
    </pre>

    <hr/>
    <div class="mt-5"></div>
    <pre>
        <code class="language-Django">
            class DiscountedBook(Book):
                class Meta:
                    proxy = True

                def apply_discount(self, discount_percentage):
                    discounted_price = self.price * (1 - discount_percentage / 100)
                    return discounted_price
            <span></span>
        </code>
    </pre>
    <h5 class="mb-3 mt-3">You can use proxy to add new function.</h5>
    <pre class="mb-5">
        <code class="language-Django">
            // Create book object:
            book = Book.objects.create(title="Sample Book", price=20)
            discounted_book = DiscountedBook.objects.create(title="Discounted Book", price=30)
            // The book contains 2 objects.

            Call the apply_discount function:
            discounted_book.apply_discount(15)
            <span></span>
        </code>
    </pre>

    <hr/>
    <div class="mt-5"></div>
    <pre>
        <code class="language-Django">
            class DiscountedBookManager(models.Manager):
                def get_queryset(self):
                    return super().get_queryset().filter(price__lt=10)
                def expensive_books(self):
                    return self.filter(price__gte=9)

            class DiscountedBook(Book):
                class Meta:
                    proxy = True
                objects = DiscountedBookManager()
            <span></span>
        </code>
    </pre>
    <h5 class="mb-3 mt-3">You can use proxy to change Manager.</h5>
    <pre class="mb-5">
        <code class="language-Django">
            // Create book object:
            book = Book.objects.create(title="Cheap Book", price=5)
            discounted_book = DiscountedBook.objects.create(title="Expensive Book", price=15)

            // Call Managers:
            DiscountedBook.objects.all()
            DiscountedBook.objects.expensive_books()
            <span></span>
        </code>
    </pre>

    <hr/>
    <div class="mt-5"></div>
    <pre>
        <code class="language-Django">
            class DiscountedBook(Book):
                class Meta:
                    proxy = True

                def save(self, *args, **kwargs):
                    self.price -= 2
                    super().save(*args, **kwargs)
            <span></span>
        </code>
    </pre>
    <h5 class="mb-3 mt-3">You can use proxy to change save method.</h5>
    <pre class="mb-5">
        <code class="language-Django">
            // Create book object:
            book = Book.objects.create(title="khaled Book", price=7)
            discounted_book = DiscountedBook.objects.create(title="Harry Potter", price=12)
            // Book price will be 7 otherwise, discounted_book price will be 10.
            <span></span>
        </code>
    </pre>

    <hr/>
    <div class="mt-5"></div>
    <pre>
        <code class="language-Django">
            class FreeBookManager(models.Manager):
                def get_queryset(self):
                    return super().get_queryset().filter(price=0)

            class FreeBook(Book):
                class Meta:
                    proxy = True
                objects = FreeBookManager()

            class ExpensiveBookManager(models.Manager):
                def get_queryset(self):
                    return super().get_queryset().filter(price__gt=50)

            class ExpensiveBook(Book):
                class Meta:
                    proxy = True
                objects = ExpensiveBookManager()
            <span></span>
        </code>
    </pre>
    <h5 class="mb-5 mt-3">You can create multiple proxy models for the same original model.</h5>
</div>