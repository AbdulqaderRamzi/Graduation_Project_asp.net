<div style="max-width:75%; text-align:center; margin-left:auto; margin-right:auto;" class="d-flex flex-column justify-content-center align-content-center text-start">
    <h1 class="p-4 my-5 custom-title" style="font-size: 80px; font-weight: 700;">Manager</h1>
    <h4 class="text-center mt-4 mb-5">Encapsulate the database query at the model level that allows you to define methods that retrieve specific sets of data.</h4>

    <hr />
    <h4 class="mt-5 mb-0">The most popular manager in django that's objects => Model_name.objects so, we can build more managers.</h4>
    <h4 class="mt-4 mb-5">Two types of managers that are Custom QuerySets and Managers. The Differences Between them are the way of calling (invoking).</h4>

    <hr />
    <h2 class="my-5 custom-title">Custom QuerySet</h2>
    <div class="mt-4"></div>
    <h4 class="mb-5 mt-0">methods are accessible via the model's manager.</h4>

    <h3 class="mb-5 mt-5 custom-color text-center">First Example</h3>
    <pre>
        <code class="language-Django">
            class BookQuerySet(models.QuerySet):
                def published_books(self):
                    return self.filter(published=True)

            class Book(models.Model):
                published = models.BooleanField(default=False)
                objects = BookQuerySet.as_manager()
            <span></span>
        </code>
    </pre>
    <h4 class="mb-3 mt-5">How to call it?</h4>
    <pre class="mb-5">
        <code class="language-Django">
            // Answer:
            Book.objects.published_books()
            <span></span>
        </code>
    </pre>

    <hr />
    <h3 class="mb-5 mt-5 custom-color text-center">Second Example</h3>
    <pre>
        <code class="language-Django">
            class ProductQuerySet(models.QuerySet):
                def price_sorted(self):
                    return self.order_by('price')
                def expensive(self):
                    return self.filter(price__gte=50)

            class Product(models.Model):
                price = models.DecimalField(max_digits=10, decimal_places=2)
                objects = ProductQuerySet.as_manager()
            <span></span>
        </code>
    </pre>
    <h4 class="mb-3 mt-5">How to call them?</h4>
    <pre class="mb-5">
        <code class="language-Django">
            // Answer:
            Product.objects.price_sorted()
            Product.objects.expensive()
            <span></span>
        </code>
    </pre>

    <hr />
    <h2 class="my-5 custom-title">Custom Manager</h2>
    <div class="mt-4"></div>
    <h4 class="mb-5 mt-0">querying and managing objects at the model level.</h4>
    <h3 class="mb-5 mt-5 custom-color text-center">First Example</h3>
    <pre class="mb-5">
        <code class="language-Django">
            class PublishedBookManager(models.Manager):
                def published_books(self):
                    return self.filter(published=True)

            class Book(models.Model):
                published = models.BooleanField(default=False)
                published_objects = PublishedBookManager()
            <span></span>
        </code>
    </pre>
    <h4 class="mb-3">How to call it?</h4>
    <pre class="mb-5">
        <code class="language-Django">
            // Answer:
            // To retrieve all books.
            Book.published_objects.all()

            // To retrive books depends on published_books function.
            Book.published_objects.published_books()
            <span></span>
        </code>
    </pre>
    <hr />
    <h3 class="mb-5 mt-5 custom-color text-center">Second Example</h3>
    <pre class="mb-5">
        <code class="language-Django">
            class CustomFilterManager(models.Manager):
                def get_queryset(self):
                    return super().get_queryset().order_by('price')
                def expensive_books(self):
                    return self.filter(price__gte=50)

            class Book(models.Model):
                price = models.DecimalField(max_digits=10, decimal_places=2)
                custom_filter = CustomFilterManager()
            <span></span>
        </code>
    </pre>
    <h4 class="mb-3">How to call it?</h4>
    <pre class="mb-5">
        <code class="language-Django">
            // Answer:
            // To retrieve all books order by price because we overridden get_queryset.
            Book.custom_filter.all()

            // To retrive books depends on expensive_books function.
            Book.custom_filter.expensive_books()
            <span></span>
        </code>
    </pre>
</div>