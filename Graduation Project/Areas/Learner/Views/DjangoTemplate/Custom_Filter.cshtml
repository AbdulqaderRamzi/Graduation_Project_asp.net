<div style="max-width:75%; text-align:center; margin-left:auto; margin-right:auto;" class="d-flex flex-column justify-content-center align-content-center text-start">
    <h1 class="p-4 my-5 custom-title" style="font-size: 80px; font-weight: 700;">Custom Filter</h1>

    <hr>
    <h4 class="mt-5 mb-0">Create templatetags folder in your app.</h4>
    <h4 class="mt-3 mb-5">Create file there and name it whatever you want.</h4>

    <hr>
    <h4 class="mt-5 mb-0">For example: blog_filters.py</h4>
    <h5 class="mt-3 mb-4">Insert the following lines at the top.</h5>
    <pre class="mb-5">
        <code class="language-Django">
            from django import template
            register = template.Library()
            <span></span>
        </code>
    </pre>

    <hr />
    <h2 class="my-5 custom-title">First Filter</h2>
    <h3 class="custom-title text-start mb-0 mt-5">1</h3>
    <h4 class="mt-4 mb-0">Register your filter name.</h4>
    <h3 class="custom-title text-start mb-0 mt-5">2</h3>
    <h4 class="mt-4 mb-5">Add your filter function.</h4>

    <hr />
    <h2 class="my-5 custom-title">Examples</h2>
    <h4 class="mb-2 mt-4">Upper the first letter.</h4>
    <pre>
        <code class="language-Django">
            @@register.filter(name="uppercase_first_letter")
            def uppercase_first_letter(value):
                return value[0].upper() + value[1:]
            <span></span>
        </code>
    </pre>
    <h4 class="mt-5 mb-2">Use it in your Templates.</h4>
    <pre class="mb-3">
        <code class="language-Django">
            {% load blog_filters %}
            {{ name|uppercase_first_letter }}
            <span></span>
        </code>
    </pre>
    <pre class="mb-5">
        <code class="language-Django">
            input: khaled
            output: Khaled
            <span></span>
        </code>
    </pre>

    <hr />
    <h4 class="mt-5 mb-2">Reverse the list or string.</h4>
    <pre>
        <code class="language-Django">
            @@register.filter(name="reverse")
            def reverse(value):
                return value[::-1]
            <span></span>
        </code>
    </pre>
    <h4 class="mt-5 mb-2">Use it in your Templates.</h4>
    <pre class="mb-3">
        <code class="language-Django">
            {% load blog_filters %}
            {{ name|reverse }}
            <span></span>
        </code>
    </pre>
    <pre class="mb-5">
        <code class="language-Django">
            input: khaled
            output: delahk
            <span></span>
        </code>
    </pre>

    <hr />
    <h4 class="mt-5 mb-2">Truncates a string to a specified length and adds ellipsis if it's longer.</h4>
    <pre>
        <code class="language-Django">
            @@register.filter(name="truncate_string")
            def truncate_string(value, length):
                if len(value) > length:
                    return value[:length] + '.....'
                return value
            <span></span>
        </code>
    </pre>
    <h4 class="mt-5 mb-2">Use it in your Templates.</h4>
    <pre class="mb-3">
        <code class="language-Django">
            {% load blog_filters %}
            {{ description|truncate_string:10 }}
            <span></span>
        </code>
    </pre>
    <pre class="mb-5">
        <code class="language-Django">
            input: hello this is khaled alshammi
            output: hello this.....

            input: hello
            output: hello
            <span></span>
        </code>
    </pre>

    <hr />
    <h4 class="mt-5 mb-2">Calculates the difference between two dates and returns it in days.</h4>
    <pre>
        <code class="language-Django">
            @@register.filter(name="date_difference")
            def date_difference(value, date):
                delta = value - date
                return delta.days
            <span></span>
        </code>
    </pre>
    <h4 class="mt-5 mb-2">Use it in your Templates.</h4>
    <pre class="mb-3">
        <code class="language-Django">
            // Number of days between today and last seen
            {% load blog_filters %}
            {{ last_login_date|date_difference:date.today }}
            // Current data is 2023-08-25
            <span></span>
        </code>
    </pre>
    <pre class="mb-5">
        <code class="language-Django">
            input: 2023-08-20
            output: 5 days
            <span></span>
        </code>
    </pre>

    <hr />
    <h4 class="mt-5 mb-2">Subtracts value from the input</h4>
    <pre>
        <code class="language-Django">
            @@register.filter(name="subtract")
            def subtract(value, arg):
                return value - arg
            <span></span>
        </code>
    </pre>
    <h4 class="mt-5 mb-2">Use it in your Templates.</h4>
    <pre class="mb-3">
        <code class="language-Django">
            {% load blog_filters %}
            {{ review|subtract:5 }}
            <span></span>
        </code>
    </pre>
    <pre class="mb-5">
        <code class="language-Django">
            input: 7
            output: 2
            <span></span>
        </code>
    </pre>
</div>