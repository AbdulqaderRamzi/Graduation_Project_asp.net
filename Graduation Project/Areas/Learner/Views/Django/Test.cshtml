<div style="max-width:75%; text-align:center; margin-left:auto; margin-right:auto;" class="d-flex flex-column justify-content-center align-content-center text-start">
    <h1 class="p-4 my-5 custom-title" style="font-size: 80px; font-weight: 700;">Test</h1>
    <h5 class="mt-4 mb-0">
        Use test to test your app before running the app. test will help you to find the errors before errors occur with user.
        helps to identify bugs, errors, and unexpected behavior in your code before it's deployed to a production environment.
        created data in test. will not be exists in database. it's dummy data.
    </h5>
    <hr />
    <h2 class="my-5 custom-title">Notes</h2>
    <h5 class="mb-0 mt-5"><span style="font-size: 22px;font-weight: 700;" class="custom-color text-lg-start">1 </span> Create class for each test case. for example: view, url, template name, model etc.</h5>
    <h5 class="mb-0 mt-2"><span style="font-size: 22px;font-weight: 700;" class="custom-color text-lg-start">2 </span> Each function has its own data.</h5>
    <h5 class="mb-0 mt-2"><span style="font-size: 22px;font-weight: 700;" class="custom-color text-lg-start">3 </span> Each test case could has multiple tests.</h5>
    <h5 class="mb-5 mt-2"><span style="font-size: 22px;font-weight: 700;" class="custom-color text-lg-start">4 </span> Each test function should start with test word (test_).</h5>

    <hr />
    <h2 class="my-5 custom-title">Model</h2>
    <div class="mt-4"></div>
    <pre class="mb-5">
        <code class="language-Django">
            class Client(models.Model):
                name = models.CharField(max_length=100, verbose_name='Name')
                email = models.EmailField(unique=True)
            <span></span>
        </code>
    </pre>

    <hr />
    <h2 class="my-5 custom-title">First class test</h2>
    <div class="mt-4"></div>
    <pre class="mb-5">
        <code class="language-Django">
            from django.test import TestCase
            from cars.models import Client
            class Client(TestCase)
                # first test
                def test_client_zero(self):
                    # get all clients related to user function
                    # clients model has 0 objects
                    self.assertEquals(Client.objects.count(), 0)
                    # create client object
                    Client.objects.create(name="khaled", email="khaled@gmail.com")
                    # we have 1 client now.
                    self.assertEquals(Client.objects.count(), 1)
                    first_client = Client.objects.get(id=1)
                    # client name is khaled.
                    self.assertEquals(first_client.name, "khaled")
                    # "@@gmail.com" in first client email.
                    self.assertTrue("@@gmail.com" in first_client.email)
                    # "@@gmail.com" in first client email.
                    self.assertFalse("@@gmail.com" not in first_client.email)

                def test_multiple_clients(self):
                    Client.objects.create(name="ahmed", email="ahmed@gmail.com")
                    Client.objects.create(name="esraa", email="esraa@gmail.com")
                    Client.objects.create(name="ehsan", email="ehsan@gmail.com")
                    Client.objects.create(name="noor", email="noor@gmail.com")
                    # 4 clients
                    self.assertEquals(Client.objects.count(), 4)
            <span></span>
        </code>
    </pre>

    <hr />
    <h2 class="my-5 custom-title">Run your tests</h2>
    <h5 class="mb-3 mt-4">Run all the test files in your project:</h5>
    <pre class="mb-2">
        <code class="language-Django">
            python manage.py test
            <span></span>
        </code>
    </pre>
    <h5 class="mb-3 mt-5">Run a specific test file:</h5>
    <pre class="mb-5">
        <code class="language-Django">
            python manage.py test app name
            <span></span>
        </code>
    </pre>

    <hr />
    <h2 class="my-5 custom-title">Test view</h2>
    <div class="mt-4"></div>
    <pre class="mb-3">
        <code class="language-Django">
            from django.test import TestCase
            from django.template import TemplateDoesNotExist
            from django.template.loader import select_template
            from django.urls import reverse
            class ViewTestCase(TestCase):
                # test view request
                def test_view_handles_post_get_request(self):
                    # Define the URL for your view (replace 'my-view-url' with the actual URL)
                    url = reverse('search_view')
                    # Send a POST request to the view
                    post_response = self.client.post(url)
                    # Check if the post_response status code is 200 OK, indicating a successful POST request
                    self.assertEqual(post_response.status_code, 200)
                    # Send a GET request to the view
                    get_response = self.client.get(url)
                    # Check if the get_response status code is 200 OK, indicating a successful GET request
                    self.assertEqual(get_response.status_code, 200)
            <span></span>
        </code>
    </pre>

    <h4 class="mb-3 mt-5">Test view context</h4>
    <pre class="mb-3">
        <code class="language-Django">
                def test_view_context(self):
                    # Define the URL for the view you want to test
                    url = reverse('search_view')  # Replace with your actual view name
                    # Send a GET request to the view
                    response = self.client.get(url)
                    # Check if the response status code is 200 (OK)
                    self.assertEqual(response.status_code, 200)
                    # Check if specific data is present in the context
                    self.assertIn('name', response.context)
                    # Check the values of the context data
                    self.assertEqual(response.context['name'], 'khaled')
            <span></span>
        </code>
    </pre>
    <h4 class="mb-3 mt-5">Test view template name</h4>
    <pre class="mb-5">
        <code class="language-Django">
            def test_template_name(self):
                # Define the URL for the view you want to test
                url = reverse('search_view')  # Replace with your actual view name
                # Get the response by sending a GET request to the view
                response = self.client.get(url)
                # Check if the response status code is 200 (OK)
                self.assertEqual(response.status_code, 200)
                # Define the expected template name
                expected_template_name = 'blogs/search_results.html'  # Replace with the expected template name
                try:
                    # Attempt to load the template with the expected name
                    template = select_template([expected_template_name])
                except TemplateDoesNotExist:
                    # If the template does not exist, it will raise TemplateDoesNotExist
                    template = None
                #Check if the template object is not None, indicating that the template exists
                self.assertIsNotNone(template)
            <span></span>
        </code>
    </pre>

    <hr />
    <h2 class="my-5 custom-title">Test URL</h2>
    <div class="mt-4"></div>
    <pre class="mb-5">
        <code class="language-Django">
            from django.test import TestCase
            from django.urls import reverse
            class URLTestCase(TestCase):
                def test_url_path_by_name(self):
                    # Define the name of the URL pattern you want to test
                    pattern_name = 'update'  # Replace with your actual pattern name
                    # Use the reverse function to get the URL path by name
                    url_path = reverse(pattern_name)
                    # Define the expected URL path
                    expected_url_path = '/en/update/1/'  # Replace with the expected URL path
                    # Check if the resolved URL path matches the expected URL path
                    self.assertEqual(url_path, expected_url_path)
            <span></span>
        </code>
    </pre>

    <hr />
    <h2 class="my-5 custom-title">Test User</h2>
    <div class="mt-4"></div>
    <pre class="mb-5">
        <code class="language-Django">
            from django.test import TestCase
            from django.urls import reverse
            from django.contrib.auth.models import User
            class LoginTestCase(TestCase):
                /*
                    This is a custom setup method.
                    You can use it to perform any necessary setup for your test cases.
                    For example, you might create database records, set up test data, etc.
                    Use setUp function to setup the data that will be used in many test related to class.
                    To create variable use self.name = ...
                    To access it use self.name
                */
                def setUp(self):
                    # Create a test user with a known password
                    self.username = 'testuser'
                    self.password = 'testpassword'
                    self.user = User.objects.create_user(username=self.username, password=self.password)
                def test_login_valid_password(self):
                    # Define the URL for the login view
                    login_url = reverse('login')  # Replace with your actual view name
                    # Simulate a POST request to the login view with valid username and password
                    login_data = {
                        'username': self.username,
                        'password': self.password,
                    }
                    response = self.client.post(login_url, login_data, follow=True)
                    # Check if the response status code is 200 (OK) after successful login
                    self.assertEqual(response.status_code, 200)
                    # Check if the user is authenticated
                    self.assertTrue(response.context['user'].is_authenticated)
            <span></span>
        </code>
    </pre>
    <h4 class="mb-3 mt-5">Test Login Password</h4>
    <pre class="mb-5">
        <code class="language-Django">
                def test_login_invalid_password(self):
                    # Define the URL for the login view
                    login_url = reverse('login')  # Replace with your actual view name
                    # Simulate a POST request to the login view with an invalid password
                    login_data = {
                        'username': self.username,
                        'password': 'incorrect_password',
                    }
                    response = self.client.post(login_url, login_data, follow=True)
                    # Check if the response status code is 200 (OK) after login attempt
                    self.assertEqual(response.status_code, 200)
                    # Check if the user is not authenticated (invalid password)
                    self.assertFalse(response.context['user'].is_authenticated)
            <span></span>
        </code>
    </pre>
</div>