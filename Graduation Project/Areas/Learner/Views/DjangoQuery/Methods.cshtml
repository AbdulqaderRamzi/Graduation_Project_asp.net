<div style="max-width:75%; text-align:center; margin-left:auto; margin-right:auto;" class="d-flex flex-column justify-content-center align-content-center text-start">
    <h1 class="p-4 my-5 custom-title" style="font-size: 80px; font-weight: 700;">Methods</h1>
    <h4 class="text-center mt-4 mb-5">Lookups enable you to retrieve data that matches certain criteria.</h4>

    <hr />
    <h2 class="my-5 custom-title">filter</h2>
    <h5 class="mb-3 mt-4">Get all books with a rating more than 4.5</h5>
    <pre class="mb-5">
        <code class="language-Django">
            Book.objects.filter(rating__gt=4.5)
            <span></span>
        </code>
    </pre>
    <h5 class="mb-3 mt-5">Get all users over 19 and whose name is ahmed.</h5>
    <pre class="mb-5">
        <code class="language-Django">
            User.objects.filter(name="ahmed", age__gt=19)
            <span></span>
        </code>
    </pre>

    <hr />
    <h2 class="my-5 custom-title">all</h2>
    <h4 class="mb-3 mt-3">Get all books</h4>
    <pre class="mb-5">
        <code class="language-Django">
            Book.objects.all()
            <span></span>
        </code>
    </pre>

    <hr />
    <h2 class="my-5 custom-title">get</h2>
    <h5 class="mb-0 mt-3">Used with unique or primary fields.</h5>
    <h4 class="mb-3 mt-4">Get single book</h4>
    <pre class="mb-5">
        <code class="language-Django">
            Book.objects.get(id=1)
            <span></span>
        </code>
    </pre>

    <hr />
    <h2 class="my-5 custom-title">exclude</h2>
    <h5 class="mb-3 mt-4">Get all books with a rating less than 4.6</h5>
    <pre>
        <code class="language-Django">
            Book.objects.exclude()(rating__gt=4.5)
            <span></span>
        </code>
    </pre>
    <h5 class="mb-3 mt-5">Get all users under 19 and whose name is not ahmed.</h5>
    <pre class="mb-5">
        <code class="language-Django">
            User.objects.exclude()(name="ahmed", age__gt=19)
            <span></span>
        </code>
    </pre>

    <hr />
    <h2 class="my-5 custom-title">order_by</h2>
    <h4 class="mb-3 mt-4">Ascending</h4>
    <pre>
        <code class="language-Django">
            Product.objects.order_by('price')
            <span></span>
        </code>
    </pre>
    <h4 class="mb-3 mt-5">Descending</h4>
    <pre class="mb-5">
        <code class="language-Django">
            Product.objects.order_by('-price')
            <span></span>
        </code>
    </pre>

    <hr />
    <h2 class="my-5 custom-title">values</h2>
    <h4 class="mb-3 mt-3">Retrieve Model with specific fields.</h4>
    <h5 class="mb-3 mt-4">In the following example product_data will contains 2 products with their name and price without other fields like id description etc.</h5>
    <pre class="mb-3">
        <code class="language-Django">
            Product.objects.values('name', 'price')
            <span></span>
        </code>
    </pre>
    <h4 class="mb-0 mt-4">Result will be a list of dictionary.</h4>
    <h4 class="mb-5 mt-2">[{'name':'shirt', 'price':20.23}, {'name':'Tshirt', 'price':24.00}]</h4>

    <hr />
    <h2 class="my-5 custom-title">values_list</h2>
    <h4 class="mb-3 mt-3">Retrieve Model with specific fields.</h4>
    <h5 class="mb-3 mt-4">In the following example product_data will contains 2 products with their name and price without other fields like id description etc.</h5>
    <pre class="mb-3">
        <code class="language-Django">
            Product.objects.values_list('name', 'price')
            <span></span>
        </code>
    </pre>
    <h4 class="mb-0 mt-4">Result will be a list of tuples.</h4>
    <h4 class="mb-5 mt-2">[('name'='shirt', 'price'=20.23), ('name'='Tshirt', 'price'=24.00)]</h4>

    <hr />
    <h2 class="my-5 custom-title">distinct</h2>
    <h5 class="mb-3 mt-3">Book names will be distinct in the list of dictionary.</h5>
    <pre class="mb-5">
        <code class="language-Django">
            Book.objects.values("name").distinct()
            <span></span>
        </code>
    </pre>

    <hr />
    <h2 class="my-5 custom-title">Create</h2>
    <div class="mt-3"></div>
    <pre class="mb-5">
        <code class="language-Django">
            Person.objects.create()
            <span></span>
        </code>
    </pre>

    <hr />
    <h2 class="my-5 custom-title">get_or_create</h2>
    <h5 class="mb-3 mt-3">Created is boolean, if new author is created. The created flag will be True. otherwise it will be False.</h5>
    <pre class="mb-5">
        <code class="language-Django">
            author, created = Author.objects.get_or_create(name="J.K. Rowling")
            <span></span>
        </code>
    </pre>

    <hr />
    <h2 class="my-5 custom-title">update_or_create</h2>
    <h5 class="mb-0 mt-3">If an author with the name "mousa" exists, the field specified in the defaults dictionary will be updated with the new values. The created flag will be False.</h5>
    <h5 class="mb-5 mt-4">If no author with the name "mousa" exists, a new author will be created with the field from the defaults dictionary. The created flag will be True.</h5>
    <pre class="mb-5">
        <code class="language-Django">
            author, created = Author.objects.update_or_create(name="mousa", defaults={name="ahmed"})
            <span></span>
        </code>
    </pre>

    <hr />
    <h2 class="my-5 custom-title">count</h2>
    <h5 class="mb-3 mt-3">Return the number of objects that match a given query.</h5>
    <pre class="mb-5">
        <code class="language-Django">
            Book.objects.count()
            <span></span>
        </code>
    </pre>

    <hr />
    <h2 class="my-5 custom-title">latest</h2>
    <h5 class="mb-3 mt-3">Retrieve the latest object based on a specified field, usually a date-related field.</h5>
    <pre class="mb-5">
        <code class="language-Django">
            BlogPost.objects.latest('publish_date')
            <span></span>
        </code>
    </pre>

    <hr />
    <h2 class="my-5 custom-title">earliest</h2>
    <h5 class="mb-3 mt-3">Retrieves the earliest object based on a specified field, usually a date-related field.</h5>
    <pre class="mb-5">
        <code class="language-Django">
            Event.objects.earliest('start_date')
            <span></span>
        </code>
    </pre>

    <hr />
    <h2 class="my-5 custom-title">first</h2>
    <h5 class="mb-3 mt-3">Retrieve the first object in the QuerySet.</h5>
    <pre class="mb-5">
        <code class="language-Django">
            Product.objects.first()
            <span></span>
        </code>
    </pre>

    <hr />
    <h2 class="my-5 custom-title">last</h2>
    <h5 class="mb-3 mt-3">Retrieves the last object in the QuerySet.</h5>
    <pre class="mb-5">
        <code class="language-Django">
            Order.objects.last()
            <span></span>
        </code>
    </pre>

    <hr />
    <h2 class="my-5 custom-title">exists</h2>
    <h5 class="mb-3 mt-3">Checks if there are any objects in the QuerySet.</h5>
    <pre class="mb-5">
        <code class="language-Django">
            UserProfile.objects.exists()
            <span></span>
        </code>
    </pre>

    <hr />
    <h2 class="my-5 custom-title">update</h2>
    <h5 class="mb-3 mt-3">Update one or more fields of objects that match a given query.</h5>
    <pre class="mb-5">
        <code class="language-Django">
            Customer.objects.filter(premium=True).update(discount=0.15)
            <span></span>
        </code>
    </pre>

    <hr />
    <h2 class="my-5 custom-title">delete</h2>
    <h5 class="mb-3 mt-3">Remove objects that match a given query from the database.</h5>
    <pre class="mb-5">
        <code class="language-Django">
            Event.objects.filter(start_date__lt=date.today()).delete()
            <span></span>
        </code>
    </pre>
</div>