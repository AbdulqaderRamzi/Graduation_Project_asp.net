<div style="max-width:75%; text-align:center; margin-left:auto; margin-right:auto;" class="d-flex flex-column justify-content-center align-content-center text-start">
    <h1 class="p-4 my-5 custom-title" style="font-size: 80px; font-weight: 700;">Field Lookups</h1>
    <h4 class="text-center mt-4 mb-5">Lookups enable you to retrieve data that matches certain criteria.</h4>

    <hr />
    <h2 class="my-5 custom-title">exact</h2>
    <h5 class="mb-0 mt-3">Match the field value exactly.</h5>
    <h5 class="mb-3 mt-2">Example: Laptop not equal laptop.</h5>
    <pre class="mb-5">
        <code class="language-Django">
            Product.objects.get(name__exact="Laptop")
            <span></span>
        </code>
    </pre>

    <hr />
    <h2 class="my-5 custom-title">iexact</h2>
    <h5 class="mb-0 mt-3">Match the field value exactly, case-insensitively.</h5>
    <h5 class="mb-3 mt-2">Example: Laptop equal laptop.</h5>
    <pre class="mb-5">
        <code class="language-Django">
            Product.objects.filter(name__iexact="laptop")
            <span></span>
        </code>
    </pre>

    <hr />
    <h2 class="my-5 custom-title">contains</h2>
    <h5 class="mb-0 mt-3">Filter objects with a field containing the specified substring.</h5>
    <h5 class="mb-3 mt-2">Example: Django not equal django.</h5>
    <pre class="mb-5">
        <code class="language-Django">
            Article.objects.filter(title__contains="Django")
            <span></span>
        </code>
    </pre>

    <hr />
    <h2 class="my-5 custom-title">icontains</h2>
    <h5 class="mb-0 mt-3">Similar to contains, but it's case-insensitive.</h5>
    <h5 class="mb-3 mt-2">Example: Django equal django.</h5>
    <pre class="mb-5">
        <code class="language-Django">
            Article.objects.filter(title__icontains="django")
            <span></span>
        </code>
    </pre>

    <hr />
    <h2 class="my-5 custom-title">in</h2>
    <h5 class="mb-3 mt-3">Check if a field value is in a specified list.</h5>
    <pre class="mb-5">
        <code class="language-Django">
            Product.objects.filter(category__in=["Electronics", "Books"])
            <span></span>
        </code>
    </pre>

    <hr />
    <h2 class="my-5 custom-title">gt</h2>
    <h4 class="mb-0 mt-3"><</h4>
    <h5 class="mb-3 mt-2">Retrieve objects with a field value greater than the specifiedvalue.</h5>
    <pre class="mb-5">
        <code class="language-Django">
            Order.objects.filter(total_amount__gt=100)
            <span></span>
        </code>
    </pre>

    <hr />
    <h2 class="my-5 custom-title">gte</h2>
    <h4 class="mb-0 mt-3"><=</h4>
    <h5 class="mb-3 mt-2">Retrieve objects with a field value greater than or equal to the specified value.</h5>
    <pre class="mb-5">
        <code class="language-Django">
            Order.objects.filter(total_amount__gte=100)
            <span></span>
        </code>
    </pre>

    <hr />
    <h2 class="my-5 custom-title">lt</h2>
    <h4 class="mb-0 mt-3">></h4>
    <h5 class="mb-3 mt-2">Retrieve objects with a field value less than the specified value.</h5>
    <pre class="mb-5">
        <code class="language-Django">
            Event.objects.filter(start_date__lt=date.today())
            <span></span>
        </code>
    </pre>

    <hr />
    <h2 class="my-5 custom-title">lte</h2>
    <h4 class="mb-0 mt-3">>=</h4>
    <h5 class="mb-3 mt-2">Retrieve objects with a field value less than or equal to the specified value.</h5>
    <pre class="mb-5">
        <code class="language-Django">
            Event.objects.filter(start_date__lte=date.today())
            <span></span>
        </code>
    </pre>

    <hr />
    <h2 class="my-5 custom-title">startswith</h2>
    <h5 class="mb-0 mt-3">Filter objects with a field value starting with the specified substring.</h5>
    <h5 class="mb-3 mt-2">Example: J not equal j.</h5>
    <pre class="mb-5">
        <code class="language-Django">
            Author.objects.filter(name__startswith="J")
            <span></span>
        </code>
    </pre>

    <hr />
    <h2 class="my-5 custom-title">istartswith</h2>
    <h5 class="mb-0 mt-3">Filters objects with a field value starting with the specified substring, but it's case-insensitive.</h5>
    <h5 class="mb-3 mt-2">Example: J equal j.</h5>
    <pre class="mb-5">
        <code class="language-Django">
            Author.objects.filter(name__istartswith="j")
            <span></span>
        </code>
    </pre>

    <hr />
    <h2 class="my-5 custom-title">endswith</h2>
    <h5 class="mb-0 mt-3">Filter objects with a field value ending with the specified substring.</h5>
    <h5 class="mb-3 mt-2">Example: .txt not equal .TXT.</h5>
    <pre class="mb-5">
        <code class="language-Django">
            File.objects.filter(name__endswith=".txt")
            <span></span>
        </code>
    </pre>

    <hr />
    <h2 class="my-5 custom-title">iendswith</h2>
    <h5 class="mb-0 mt-3">Filter objects with a field value ending with the specified substring, but it's case-insensitive.</h5>
    <h5 class="mb-3 mt-2">Example: .txt equal .TXT.</h5>
    <pre class="mb-5">
        <code class="language-Django">
            File.objects.filter(name__iendswith=".TXT")
            <span></span>
        </code>
    </pre>

    <hr />
    <h2 class="my-5 custom-title">range</h2>
    <h5 class="mb-3 mt-3">Retrieve objects within a specified range of values.</h5>
    <pre class="mb-5">
        <code class="language-Django">
            Product.objects.filter(price__range=(50, 200))
            <span></span>
        </code>
    </pre>

    <hr />
    <h2 class="my-5 custom-title">date</h2>
    <h5 class="mb-3 mt-3">Allow you to filter based on date-related components.</h5>
    <pre class="mb-5">
        <code class="language-Django">
            Event.objects.filter(start_date__year=2023, start_date__month=8)
            <span></span>
        </code>
    </pre>

    <hr />
    <h2 class="my-5 custom-title">time</h2>
    <h5 class="mb-3 mt-3">Allow you to filter based on time-related components.</h5>
    <pre class="mb-5">
        <code class="language-Django">
            Event.objects.filter(start_time__hour=15, start_time__minute=30)
            <span></span>
        </code>
    </pre>

    <hr />
    <h2 class="my-5 custom-title">isnull</h2>
    <h5 class="mb-3 mt-3">Check if field value is NULL or None.</h5>
    <pre class="mb-5">
        <code class="language-Django">
            Product.objects.filter(description__isnull=True)
            <span></span>
        </code>
    </pre>
</div>